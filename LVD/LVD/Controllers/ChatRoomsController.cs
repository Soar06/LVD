using LVD.Models;
using LVD.Models.DTO;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace LVD.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChatRoomsController : ControllerBase
    {
        private readonly ChatDbContext _context;
        private readonly GeneralFunction _generalFunction;

        public ChatRoomsController(ChatDbContext context, GeneralFunction generalFunction)
        {
            _context = context;
            _generalFunction = generalFunction;
        }

        // GET: api/ChatRooms
        [Authorize]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ChatRoom>>> GetChatRooms()
        {
            return await _context.ChatRooms.ToListAsync();
        }

        // GET: api/ChatRooms/5
        [Authorize]
        [HttpGet("{id}")]
        public async Task<ActionResult<ChatRoom>> GetChatRoom(int id)
        {
            var chatRoom = await _context.ChatRooms.FindAsync(id);

            if (chatRoom == null)
            {
                return NotFound();
            }

            return chatRoom;
        }

        // PUT: api/ChatRooms/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutChatRoom(int id, ChatRoom chatRoom)
        {
            if (id != chatRoom.ChatID)
            {
                return BadRequest();
            }

            _context.Entry(chatRoom).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ChatRoomExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/ChatRooms
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<ChatRoomDTO>> PostChatRoom(ChatRoomDTO chatRoomDto)
        {
            // Create a new ChatRoom entity
            var chatRoom = new ChatRoom
            {
                ChatID = _generalFunction.GenerateUniqueId("cr"),
                ChatRoomName = chatRoomDto.ChatRoomName
            };

            // Add the ChatRoom to the context
            _context.ChatRooms.Add(chatRoom);
            await _context.SaveChangesAsync(); // Save to get the ID generated by the database

            // If there are UserIds, find the users and associate them with the chat room
            /*if (chatRoomDto.UserIds != null && chatRoomDto.UserIds.Count > 0)
            {
                var users = await _context.Users
                    .Where(u => chatRoomDto.UserIds.Contains(u.UserId))
                    .ToListAsync();

                // Ensure all UserIds exist in the database
                if (users.Count != chatRoomDto.UserIds.Count)
                {
                    return BadRequest("One or more users not found.");
                }

                foreach (var user in users)
                {
                    if (!user.ChatRooms.Contains(chatRoom))
                    {
                        user.ChatRooms.Add(chatRoom);
                    }
                }

                // Update the ChatRoom entity's state
                _context.Entry(chatRoom).State = EntityState.Modified;
                await _context.SaveChangesAsync();
            }

            // Map the created ChatRoom to a DTO
            var createdChatRoomDto = new ChatRoomDTO
            {
                ChatID = chatRoom.ChatID,
                ChatRoomName = chatRoom.ChatRoomName,
                UserIds = chatRoomDto.UserIds
            };*/

            // Return the created ChatRoom along with a 201 Created status
            //return CreatedAtAction(nameof(GetChatRoom), new { id = chatRoom.ChatID }, createdChatRoomDto);
            return CreatedAtAction(nameof(GetChatRoom), new { id = chatRoom.ChatID });
        }
        // DELETE: api/ChatRooms/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteChatRoom(int id)
        {
            var chatRoom = await _context.ChatRooms.FindAsync(id);
            if (chatRoom == null)
            {
                return NotFound();
            }

            _context.ChatRooms.Remove(chatRoom);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool ChatRoomExists(int id)
        {
            return _context.ChatRooms.Any(e => e.ChatID == id);
        }  
    }
}
